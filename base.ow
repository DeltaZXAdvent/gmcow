comments {
  Basic utilities:
  - Constructs making it easy for programming
  - Language support
  - Authority support
  - Some wrapped functions
}
variables global {
  argv
  index
  idnxt
}

variables player {
  id
  lang
  ruleflags
  keymap
  authority
}

subroutines {
  keymap
}
comments {
  keymap: manage button allowing
}

enum LANG {
  LANG_EN
  LANG_ZN
  CT_LANG
}

rule("base init global") {
  event { ongoing - global; }
  actions {
    global.idnxt = 1;
  }
}

rule("base init player") {
  event { ongoing - each player; all; all; }
  actions {
    "id"
    event player.id = global.idnxt;
    global.idnxt += 1;
    "language"
    event player.lang = LANG_ZN;
    if (event player == host player);
      event player.authority = 1;
    else;
      event player.authority = 0;
    end;
  }
}

enum KEYMAP {
  KM_NORMAL
  KM_MENU
  KM_DRAW
}

rule("base init") {
  event { ongoing - each player; all; all; }
  actions {
    event player.keymap[KM_NORMAL] = true;
    event player.keymap[KM_MENU] = false;
    event player.keymap[KM_DRAW] = false;
  }
}

rule("sub keymap") {
  event { subroutine; keymap; }
  actions {
    if (event player.keymap[KM_NORMAL] && !event player.keymap[KM_MENU] && !event player.keymap[KM_DRAW]);
      allow button(event player, button(primary fire));
      allow button(event player, button(secondary fire));
      allow button(event player, button(melee));
      allow button(event player, button(reload));
    else if (event player.keymap[KM_MENU]);
      disallow button(event player, button(primary fire));
      disallow button(event player, button(secondary fire));
      disallow button(event player, button(melee));
      disallow button(event player, button(reload));
    else if (event player.keymap[KM_DRAW]);
      disallow button(event player, button(primary fire));
      disallow button(event player, button(secondary fire));
      allow button(event player, button(melee));
      allow button(event player, button(reload));
    end;
  }
}
